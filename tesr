#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <BH1750.h>

#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define WIFI_SSID "Tonnam12"    
#define WIFI_PASSWORD "Tonnam110349"   

#define API_KEY "AIzaSyCyjXdnxR5cQ-CuTcoV2yW1BFNtbngr2A0"

#define USER_EMAIL "6421061008@cdti.ac.th"
#define USER_PASSWORD "cdti1234"

#define DATABASE_URL "https://esp-firebase-final-default-rtdb.asia-southeast1.firebasedatabase.app/"

FirebaseJson json;
FirebaseData stream;
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

const int bedRoom = 12;
const int livingRoom = 13;
const int bathRoom = 14;
const int kitchen = 16;
const int outside = 17;
const int fan_led = 19;

int timestamp;

String uid;

String listenerPath = "outputs/";
String databasePath;
String tempPath = "/temperature";
String humPath = "/humidity";
String presPath = "/pressure";
String timePath = "/timestamp";
String lightPath = "/light"; 

Adafruit_BME280 bme;
float temp;
float hum;
float pres;
float light;

BH1750 lightMeter;

const char* ntpServer = "pool.ntp.org";

unsigned long sendDataPrevMillis = 0;
unsigned long timerDelay = 60000;

void initBME(){
  if (!bme.begin(0x76)) {
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    while (1);
  }
}

void initWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
  Serial.println();
}

void streamCallback(FirebaseStream data) {
  Serial.printf("stream path, %s\nevent path, %s\ndata type, %s\nevent type, %s\n\n",
                data.streamPath().c_str(),
                data.dataPath().c_str(),
                data.dataType().c_str(),
                data.eventType().c_str());
  printResult(data); //see addons/RTDBHelper.h
  Serial.println();

  // Get the path that triggered the function
  String streamPath = String(data.dataPath());

  // if the data returned is an integer, there was a change on the GPIO state on the following path /{gpio_number}
  if (data.dataTypeEnum() == fb_esp_rtdb_data_type_integer) {
    String gpio = streamPath.substring(1);
    int state = data.intData();
    Serial.print("GPIO: ");
    Serial.println(gpio);
    Serial.print("STATE: ");
    Serial.println(state);
    digitalWrite(gpio.toInt(), state);
  }

  /* When it first runs, it is triggered on the root (/) path and returns a JSON with all keys
    and values of that path. So, we can get all values from the database and updated the GPIO states*/
  if (data.dataTypeEnum() == fb_esp_rtdb_data_type_json) {
    FirebaseJson json = data.to<FirebaseJson>();

    // To iterate all values in Json object
    size_t count = json.iteratorBegin();
    Serial.println("\n---------");
    for (size_t i = 0; i < count; i++) {
      FirebaseJson::IteratorValue value = json.valueAt(i);
      int gpio = value.key.toInt();
      int state = value.value.toInt();
      Serial.print("STATE: ");
      Serial.println(state);
      Serial.print("GPIO:");
      Serial.println(gpio);
      digitalWrite(gpio, state);
      Serial.printf("Name: %s, Value: %s, Type: %s\n", value.key.c_str(), value.value.c_str(), value.type == FirebaseJson::JSON_OBJECT ? "object" : "array");
    }
    Serial.println();
    json.iteratorEnd(); // required for free the used memory in iteration (node data collection)
  }

  Serial.printf("Received stream payload size: %d (Max. %d)\n\n", data.payloadLength(), data.maxPayloadLength());
}

void streamTimeoutCallback(bool timeout) {
  if (timeout)
    Serial.println("stream timeout, resuming...\n");
  if (!stream.httpConnected())
    Serial.printf("error code: %d, reason: %s\n\n", stream.httpCode(), stream.errorReason().c_str());
}

void firebase_con() {
  config.api_key = API_KEY;

  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);

  config.token_status_callback = tokenStatusCallback;
  config.max_token_generation_retry = 5;

  Firebase.begin(&config, &auth);

  if (!Firebase.RTDB.beginStream(&stream, listenerPath.c_str()))
    Serial.printf("stream begin error, %s\n\n", stream.errorReason().c_str());

  Firebase.RTDB.setStreamCallback(&stream, streamCallback, streamTimeoutCallback);

  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }

  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);

  databasePath = "/UsersData/" + uid + "/readings";
}

unsigned long getTime() {
  time_t now;
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return (0);
  }
  time(&now);
  return now;
}

void setup(){
  Serial.begin(115200);

  // Initialize BME280 sensor
  initBME();
  lightMeter.begin();
  initWiFi();
  configTime(0, 0, ntpServer);
  firebase_con();

  pinMode(bedRoom, OUTPUT);
  pinMode(livingRoom, OUTPUT);
  pinMode(bathRoom, OUTPUT);
  pinMode(kitchen, OUTPUT);
  pinMode(outside, OUTPUT);
  pinMode(fan_led, OUTPUT);
}

void loop(){
  // Send new readings to database
  if (Firebase.ready() && (millis() - sendDataPrevMillis > timerDelay || sendDataPrevMillis == 0)){
    sendDataPrevMillis = millis();

    // Get latest sensor readings
    temp = bme.readTemperature();
    hum = bme.readHumidity();
    pres = bme.readPressure()/100.0F;
    light = lightMeter.readLightLevel();

    Serial.print("Temperature: ");
    Serial.println(temp);
    Serial.println(" Â°C");
    Serial.print("Humidity: ");
    Serial.println(hum);
    Serial.println(" %");
    Serial.print("Pressure: ");
    Serial.println(pres);
    Serial.println(" hPa");
    Serial.print("Light: ");
    Serial.println(light);
    Serial.println(" lx");

    timestamp = getTime();
    Serial.print ("time: ");
    Serial.println (timestamp);

    String parentPath = databasePath + "/" + String(timestamp);

    json.set(tempPath.c_str(), temp);
    json.set(humPath.c_str(), hum);
    json.set(presPath.c_str(), pres);
    json.set(lightPath.c_str(), light);
    json.set(timePath, String(timestamp));
    Serial.printf("Set json... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());

    if(light < 25){
      digitalWrite(outside, HIGH);
      Firebase.RTDB.setInt(&fbdo, listenerPath + "19/", 1);       
    }else{
      digitalWrite(outside, LOW);
      Firebase.RTDB.setInt(&fbdo, listenerPath + "19/", 0);  
    }

    if(temp > 32){
      digitalWrite(fan_led, HIGH);
      Firebase.RTDB.setInt(&fbdo, listenerPath + "17(Fan)/", 1); 
    }else{
      digitalWrite(fan_led, LOW);
      Firebase.RTDB.setInt(&fbdo, listenerPath + "17(Fan)/", 0); 
    }
  }
}
